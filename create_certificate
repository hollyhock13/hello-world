
# 利用openssl命令生成公钥跟密钥
openssl genrsa -des3 -passout pass:x -out cert.pass.key 2048
openssl rsa -passin pass:x -in cert.pass.key -out cert.key
openssl req -new-key cert.key -out cert.csr
openssl x509 -req -days 365 -in cert.csr -signkey server.key -out cert.crt
# 将crt跟key合并生成pem文件
cat cert.crt cert.key> cert.pem
# 删除掉我们不需要用到的文件
rm -rf cert.crt cert.csr

1、生成根证书及自签名证书
1.创建根证私钥
    openssl genrsa -out root-key.key 1024

2.创建根证书请求文件
    openssl req -new -out root-req.csr -key root-key.key -keyform PEM

3.自签根证书
    openssl x509 -req   -extfile /etc/pki/tls/openssl.cnf -extensions v3_req  -in root-req.csr -out root-cert.cer -signkey root-key.key -CAcreateserial -days 3650   

    重要说明： -extfile /etc/pki/tls/openssl.cnf -extensions v3_req  参数是生成 X509 V3 版本的证书的必要条件。 /etc/pki/tls/openssl.cnf  是系统自带的OpenSSL配置文件，该配置文件默认开启 X509 V3 格式。下同。
————————————————
版权声明：本文为CSDN博主「zhang_dawei666」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/xiangguiwang/article/details/80333728


eg:
openssl genrsa -des3 -passout pass:x -out cert.pass.key 2048
openssl rsa -passin pass:x -in cert.pass.key -out test
cd /home/leon/
ls
openssl req -new-key
ls
openssl req -new-key cert.key -out cert.csr
openssl req -new -key cert.key -out cert.csr
ls
cat cert.csr

openssl x509 -req -days 365 -in cert.csr -signkey cert.key -out cert.crt
cat cert.crt
cat cert.crt  cert.key  > cert.pem
cat cert.key
cat cert.pem
openssl x509 -in cert.pem  -text -noout
cat cert.pem



[root@waf-eulerbuild-z00499884 leon]# openssl x509 -in cert.pem  -text -noout 
Certificate:
    Data:
        Version: 1 (0x0)
        Serial Number:
            c9:27:0d:f2:b5:7a:6f:a2
    Signature Algorithm: sha256WithRSAEncryption
        Issuer: C=cn, ST=gd, L=dg, O=hw, OU=waf, CN=waf-leon/emailAddress=zhangliang012/\x08\x08\x08        Validity            Not Before: Jan 28 07:48:14 2021 GMT            Not After : Jan 28 07:48:14 2022 GMT        Subject: C=cn, ST=gd, L=dg, O=hw, OU=waf, CN=waf-leon/emailAddress=zhangliang012/\x08\x08\x08
        Subject Public Key Info:            Public Key Algorithm: rsaEncryption                Public-Key: (2048 bit)                Modulus:                    00:b4:f1:8e:21:34:98:34:ce:0a:13:e0:16:8c:49:
                    11:8b:ba:b9:29:3b:34:ef:36:af:ad:f2:63:35:a9:                    b2:f4:c0:94:24:80:2d:dd:7b:d4:c5:26:e5:ec:a8:                    12:46:eb:e1:9f:07:f6:c9:f6:cc:43:2f:47:32:73:
                    80:8d:22:db:1d:0f:fa:4c:67:85:18:4e:f7:d4:b7:                    4f:af:e8:b4:83:37:c7:61:d7:8d:93:4b:af:db:0b:
                    77:41:2f:fe:e9:48:8e:d6:22:7b:0e:e0:cf:f0:b9:                    a4:21:03:64:ec:f3:2a:85:36:95:68:c0:cf:6f:eb:                    f0:1e:7f:30:50:85:13:5c:c2:2e:9b:4a:c8:cd:10:                    c2:f3:3c:9d:ba:e7:44:ff:19:f0:71:15:83:4a:0e:                    22:a6:92:23:2c:65:50:1c:4b:99:ce:9c:98:1e:fe:
                    e1:b1:bb:53:00:12:03:9a:0e:9e:07:7c:a5:c4:f1:                    f8:96:95:79:78:18:ea:41:f8:fb:44:b9:de:60:ad:                    62:b7:96:ad:5e:c4:77:4c:8e:c8:b7:21:ac:e3:1e:                    4a:d2:94:03:48:16:4a:37:61:83:fe:98:4f:f7:f7:                    b2:3c:3f:0b:f2:91:ba:cf:83:e8:e1:47:02:ef:2b:
                    6a:07:fb:ff:28:ea:8a:b3:25:8b:6d:de:08:44:6a:
                    69:61
                Exponent: 65537 (0x10001)
    Signature Algorithm: sha256WithRSAEncryption
         9c:5c:e8:9e:ae:32:56:35:37:2c:12:85:2b:92:b7:01:a6:da:
         e4:2e:67:e0:8d:8e:37:d0:35:63:23:61:fa:35:11:9e:b8:90:
         9f:da:b6:80:a8:c3:6d:af:bc:1b:2a:25:33:22:74:68:2b:2e:
         9c:35:19:a7:fe:d3:4b:ec:8a:91:14:59:03:d2:a2:38:44:f1:
         ed:c3:f3:7c:c7:4c:88:d4:92:59:db:b8:fd:26:30:26:e2:91:
         17:25:11:f1:fc:8e:f8:32:65:a7:f9:9a:a4:51:56:cf:d0:b0:
         51:70:1f:c7:6d:ae:46:b3:43:a3:cf:a0:ef:0b:ff:3c:4d:ca:
         d9:a8:a0:7d:6a:dd:0a:e8:4b:55:3c:36:70:14:72:54:08:4e:
         ed:e8:5d:3f:f0:eb:97:64:f9:44:b2:51:23:71:2e:f1:f2:e0:
         56:1e:4b:fa:32:34:16:3f:ce:cc:66:c8:79:f2:9a:24:fb:fe:
         37:3f:bd:ee:91:8f:31:ea:50:90:7e:4b:f7:0f:1a:58:34:af:
         f7:16:05:5d:85:79:02:12:89:fc:98:96:0f:77:bc:31:cb:91:
         73:79:5b:ac:35:4b:91:4c:8c:55:06:ed:17:25:a0:54:dd:96:
         0b:9c:5e:87:99:eb:18:5e:3c:a3:cc:a1:af:52:f1:11:04:00:
         78:b8:e9:86
[root@waf-eulerbuild-z00499884 leon]#


openssl s_server -accept 2009 -key serverprikey.pem -cert server.pem -ssl3 -cipher EXP-KRB5-RC4-MD5 -chain -debug -msg
openssl s_server -accept 2009 -key waf_default.key -cert waf_default.crt  -tls1_2 -cipher EXP-KRB5-RC4-MD5 -chain -debug -msg
openssl s_server -accept 2009 -key waf_default.key -cert waf_default.crt  -tls1_2  -chain -debug -msg
/opt/cloud/WAF-Engine/waflib/openssl/bin/openssl s_server -accept 2009 -key waf_default.key -cert waf_default.crt  -tls1_2  -chain -debug -msg
/opt/cloud/WAF-Engine/waflib/openssl/bin/openssl s_server -accept 2009 -key waf_default.key -cert waf_default.crt  -tls1_2   -debug -msg
openssl s_server -accept 2009 -key waf_default.key -cert waf_default.crt  -tls1_2  -chain -debug -msg
/opt/cloud/WAF-Engine/waflib/openssl/bin/openssl s_server -accept 2009 -key waf_default.key -cert waf_default.crt  -tls1_2   -debug -msg
/opt/cloud/WAF-Engine/waflib/openssl/bin/openssl s_server -accept 2009 -key waf_default.key -cert waf_default.crt  -tls1_2   -debug -msg

